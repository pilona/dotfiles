# vim: ft=zsh

Python() (
    export PYTHONPATH="${HOME}/.python.d:${PYTHONPATH}"
    export PYTHONSTARTUP="${HOME}/.python.d/rc.py"
    if [ $# -gt 0 ]; then
        pdb "$@"
    else
        command python -q
    fi
)

rg() {
    command rg "$@" | less
}

ls() {
    command ls --human-readable \
               --escape \
               --width=$COLUMNS \
               -C \
               --color=always "$@" | less
}

deprecated() {
   local original=$1
   shift

   tput setaf $COLOR_YELLOW
   echo "Command \"$original\" is deprecated; use \"$*\" instead" 1>&2
   tput sgr0

   "$@"
}

mail_account() {
    if [ -z "$M" ]; then
        if _isSchoolTime; then
            echo cmail.carleton.ca
        else
            echo alexpilon.ca
        fi
    else
        echo "$M"
        unset M
    fi
}

mbsync() {
    if [ $# = 0 ]; then
        local MAIL_ACCOUNT=$(mail_account)
        if [ -n "$MAIL_ACCOUNT" ] && [ -d "$HOME/Documents/Mail/$MAIL_ACCOUNT" ]; then
            command mbsync "$MAIL_ACCOUNT"
        else
            echo "Cannot sync '$MAIL_ACCOUNT': No such file or directory" 1>&2
            return 1
        fi
    else
        command mbsync "$@"
    fi
}

rc() {
    if [ $# = 0 ]; then
        action=list-units
    else
        action="$1"
        shift
    fi
    case "$action" in
        l|lu) action=list-units ;;
        ls) action=list-sockets ;;
    esac
    case "$action" in
        list*|status|show|-*)
            systemctl "$action" "$@"
            ;;
        log)
            if ! [ $# = 1 ]; then
                echo "Only 1 argument supported to 'log' for now." 1>&2
                return 1
            else
                sudo journalctl -u "$1"
            fi
            ;;
        *)
            sudo systemctl "$action" "$@"
            ;;
    esac
}

SafeLDD() {
    objdump -p "$@" | grep NEEDED | awk '{print $2}'
}


ExtractSrc() {
    command grep -h -o -e 'src="[^"]*' -e "src='[^']*" "$@" | cut -b 6-
}

WWWExtractSrc() {
    # Expects only well-formed href attributes.
    if [ "$#" = 0 ]; then
        echo 'ExtractHref: ERROR: Expected URL argument.' 1>&2
    else
        for i in "$@"; do
            curl -L "$i"
        done | ExtractSrc
    fi
}

ExtractHref() {
    # `-i` option to grep necessary because whoever generated the java
    # documentation can't generate proper XHTML. Tags must be lower space.
    # Yeeeesh!
    grep -h -i -o -e 'href="[^"]*' -e "href='[^']*" "$@" | cut -b 7-
}

WWWExtractHref() {
    # Expects only well-formed href attributes.
    if [ "$#" = 0 ]; then
        echo 'ExtractHref: ERROR: Expected URL argument.' 1>&2
    else
        for i in "$@"; do
            curl -L "$i"
        done | ExtractHref
    fi
}

ModPaths() {
    lsmod \
      | sed 1d \
      | awk '{print $1}' \
      | xargs -L 1 modinfo -F filename \
      | cut -d / -f 6- \
      | sort \
      | cut -d . -f 1
}

FilterShellComment() {
    grep -v -e '^[[:space:]]*#' -e '^[[:space:]]*$' "$@"
}

hexlify() {
    if [ $# != 1 ]; then
        echo "usage: $0 <string>" 1>&2
        return 1
    else
        python -c "from binascii import hexlify; print(hexlify('"$1"'.encode()).decode())"
    fi
}

# _webdoc <HTML docs path> <documentation title> <looked up name>...
# Show docs for names, at HTML doc path.
# Self-document as documentation title.
# TODO: zsh, bash completion
_webdoc() {
    docs="$1"
    prefix="$2"
    shift
    shift

    for arg in "$@"; do
        local target
        target="${docs:+$docs/}${arg}.html"
        if ! [ -f  "$target" ]; then
            echo "${prefix}: No such file or directory: \"$target\"" 1>&2
            return 1
        fi
    done

    while [ $# -gt 0 ]; do
        "$BROWSER" "file://${docs:+$docs/}${1}.html"
        shift
        while [ -z "$response" ] && [ $# -gt 0 ]; do
            # Emulate man
            echo "--${prefix}-- next: $1 [ view (return) | skip (Ctrl-D) | quit (Ctrl-C) ]"
            local response
            if ! read response; then
                shift
            else
                break
            fi
        done
    done
}

# TODO: Handle member references in first argument.
# TODO: Handle builtins: constants, functions, classes, etc.
Pydoc() {
    local basedir='/usr/share/doc/python/html'
    if [ $# = 0 ]; then
        "$BROWSER" "${basedir}/index.html"
    else
        _webdoc "${basedir}/library" Pydoc "$@"
    fi
}

# TODO: Catch member references in first argument and jump to first instance if
#       type not specified.
Javadoc() {
    _webdoc /usr/share/doc/java8-openjdk/api \
            Javadoc \
            $(for arg in "$@"; do
                  if command grep -qF . <<< "$arg"; then
                      echo "$(tr . / <<< "$arg")"
                  else
                      echo "java/lang/${arg}"
                  fi
              done)
}

PGdoc() {
    local basedir='/usr/share/doc/postgresql/html'
    case "$1" in
        -k)
            shift
            local cs="$(expr length "$basedir")"
            find "$basedir" -type f \
              | command grep -i "$*" \
              | while read line; do
                    echo "$line" | cut -c "$((cs + 2))"- | sed 's/\.html$//'
                done
            ;;
        -K)
            shift
            find "$basedir" -type f \
              | while read line; do
                  if command grep -F -q -i -e "$*" "$line"; then
                      _webdoc '' \
                              PGdoc \
                              "${line%.html}"
                  fi
                done
            ;;
        *)
            _webdoc "$basedir" \
                    PGdoc \
                    "${@:-index}"
            ;;
    esac
}

ImageSize() {
    if [ $# = 0 ]; then
        echo /dev/stdin
    else
        for pic in "$@"; do
            echo "$pic"
        done
    fi \
      | while read line; do
            identify "$line" \
              | cut -c $(($(expr length "$line") + 1))-
        done 2>/dev/null \
      | awk '{ print $2 }'
}

UT2004() {
    pushd .
    cd /opt/ut2004/System
    xinit ./ut2004-bin-linux-amd64 -- :${1:-0}
    popd .
}

Quote() {
    python -c "from urllib.parse import quote; print(quote('$*'))"
}

UnQuote() {
    python -c "from urllib.parse import unquote; print(unquote('$*'))"
}

Scan() {
    scanimage --device='fujitsu:ScanSnap S510M:502537' \
              --mode Color \
              --source 'ADF Duplex' \
              --resolution 150 \
              "$@"
}

NmapSSL() {
    nmap --script ssl-enum-ciphers -p "$@"
}

ReallyMute() {
    for control in Master Headphone Speaker Bass\ Speaker PCM; do
        [ "$control" = PCM ] || amixer --quiet set "$control" mute
        amixer --quiet set "$control" 0
    done
}

PDFCat() {
    local output="$1"
    shift
    gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile="$output" "$@"
}

faketty() {
    script --quiet --command "$*" /dev/null
}

# http://www.etalabs.net/sh_tricks.html
fnmatch() {
    case "$2" in
        $1) return 0 ;;
         *) return 1 ;;
    esac
}

chomp() {
    sed 's/^[[:space:]]*//; s/^[[:space:]]*$//' "$@"
}

ROVNC() {
    x0vncserver -SendCutText=0 \
                -AcceptCutText=0 \
                -AcceptPointerEvents=0 \
                -AcceptKeyEvents=0 \
                -ZlibLevel=9 \
                -SecurityTypes=None \
                "$@"
}

Duration() {
    mediainfo ${*:-*} \
      | awk 'BEGIN {
                 total=0
             }
             $0 ~ /Duration / && NR % 3 == 1 {
                 total += $3 * 60 + $4
             }
             END {
                hours = total / 3600
                total %= 3600

                minutes = total / 60
                total %= 60

                seconds = total
                printf "%dh %dmn %ds\n", hours, minutes, seconds
             }'
}

GetPassword() {
    scrypt dec ~/Documents/.passdb/"$1" | xclip -selection clipboard -loops 2
}

_scryptSave() {
    if [ -e ~/Documents/.passdb/"$1" ]; then
        tput setaf $COLOR_RED
        tput bold
        echo "\"$1\" already exists!" 1>&2
        tput sgr0
        return 1
    fi

    xclip -filter -selection clipboard -loops 1 \
      | scrypt enc /dev/stdin ~/Documents/.passdb/"$1"
}

NewPassword() {
    pwgen ${2:-10} 1 | _scryptSave "$1"
}

NewPassphrase() {
    python << EOF | _scryptSave "$1"
from random import SystemRandom, shuffle
with open('/usr/share/dict/american-english') as fp:
    words = list(map(str.strip, fp))
print(*SystemRandom().sample(words, 5))
EOF
}

LinkCheck() {
    command wget --spider \
                 --execute robots=off \
                 --recursive \
                 --page-requisites \
                 "$@"
}

SYN-SENT() {
    ss -antp | grep SYN-SENT
}

SOCKS() {
    ss -antpH '( dport = :socks )'
}

Microphone() {
    ffmpeg -f alsa -i "${default:-$1}" \
           -c libopus -application voip \
           -f opus "./$(date -Is)".opus
}

MicrophoneScope() {
    ffplay -f alsa -i "${default:-$1}" -showmode 1
}

GlyphDebug() {
    FC_DEBUG=4 pango-view --font="$1" -t "$2" | grep family:
}

chromiumip() {
    chromiumi --proxy-server=socks://localhost:1080
}

chromiumi() {
    local tmpdir="$(mktemp -d)"
    sudo mount -t tmpfs \
               -o mode=0700,uid="$(id -u)",gid="$(id -g)" \
               "$(basename "$tmpdir")" "$tmpdir"
    mkdir "$tmpdir"/cache
    mkdir "$tmpdir"/config
    echo "$tmpdir"
    sudo \
        unshare --mount \
                --ipc \
            -- \
            sudo tmpdir="$tmpdir" \
                 -u "$(id -un)" \
                 -g "$(id -gn)" \
                 sh <<- EOF
                sudo mount --make-private "$tmpdir"
                sudo mount -o bind "$tmpdir"/config ~/.config/chromium
                sudo mount -o bind "$tmpdir"/cache ~/.cache/chromium
                sudo -k
                chromium "$@"
EOF
    sudo umount "$tmpdir"
    rmdir "$tmpdir"
}

xtitle() {
    wmctrl -r :ACTIVE: -N "$*"
}

title() {
    printf '%s%s%s\n' "$(tput tsl)" "${*:-$(cat)}" "$(tput fsl)"
}

SSHPublicKeys() {
    for key in /etc/ssh/*.pub; do
        ssh-keygen -v -lf "$key"
    done 2>/dev/null \
      | awk -c '{
                    if ($1 ~ /^[0-9]+$/) {
                        print $0
                        key++
                        visual_line = 0
                    } else {
                        visual_keys[key][visual_line++] = $0
                    }
                }

                END {
                    for (visual_line=0; visual_line<11; visual_line++) {
                        for (i=1; i<=key; i++)
                            printf "%s%s", (i == 1 ? "" : " "), visual_keys[i][visual_line]
                        printf "\n"
                    }
                }'
}

SSHAgent() {
    export SSH_AGENT_PID=$(pidof ssh-agent)
    if [ -n "$SSH_AGENT_PID" ]; then
        export SSH_AUTH_SOCK=$(echo /tmp/ssh-*/agent.*)
    else
        eval "$(ssh-agent)"
    fi
}

EXIF() {
    gm identify -format '%[EXIF:*]' "$@"
}

PATHs() {
    printf '%s$PATH:%s\n' "$(tput bold)" "$(tput sgr0)"
    echo "$PATH" | tr ':' '\n'
}

wttr() {
    curl -s "wttr.in/${1:-ottawa}" | LESS=RXS less
}

_abspath() {
    case "$1" in
        /*) true ;;
        *) false ;;
    esac
}

_relpath() {
    case "$1" in
        ./*) true ;;
        *) false ;;
    esac
}

gdiff() {
    if _abspath "$1" || ! _relpath "$1"; then
        local left=./"$1"
    else
        local left="$1"
    fi
    shift
    if _abspath "$1" || ! _relpath "$1"; then
        local right=./"$1"
    else
        local right="$1"
    fi
    shift
    git diff --no-index "$@" "${left:--}" "${right:--}"
}

PatchLeftovers() {
    find -type f \( -name '*.rej' -o -name '*.orig' \) ${@:+-exec $* '{}' '+'}
}

# I didn't write this, but don't remember whence it came either.
pause() {
    echo "Press any key to continue or '<Ctrl>-C' to exit."
    (
        tty_state="$(stty -g)"
        stty -icanon
        LC_ALL=C dd bs=1 count=1 >/dev/null 2>&1
        stty "$tty_state"
    ) </dev/tty
}

Man() {
    PAGER='nvim -c set\ ft=man -' man "$@"
}

Man.vim() {
    nvim man://"$1"
}

LookIn() {
    ffmpeg -f v4l2 -i /dev/video0 -f mpegts -r 1 'tcp://[::1]:5000?listen=1'
}

ListenIn() {
    ffmpeg -f alsa -i "${@:-default}" \
           -filter:a volume=30dB -c:a opus -b:a 128K \
           -f webm 'tcp://[::1]:5000?listen=1'
}

# TODO: Hardware accel?
Screencast() {
    audio_device='sysdefault:CARD=B20'
    # -thread_queue_size 128, 256, etc. rather than default 8 because of buffer overruns.
    # FIXME: Is that a sign of future desync?
    vthread_queue_size=256
    athread_queue_size=128

    case "$1" in
        ''|-h|-help|--help)
            echo 'usage: Screencast output_filename.mkv [<audio device>]' 1>&2
            echo "audio device defaults to: $audio_device" 1>&2
            return 1
            ;;
        *.mkv)
            ;;
        *)
            echo 'Output file container type should be Matroska (.mkv)' 1>&2
            return 1
            ;;
    esac

    # TODO: Drop the -c:a copy to lower the bitrate?
    ffmpeg -f x11grab -thread_queue_size $vthread_queue_size -r 25 -s 1920x1080 -i $DISPLAY \
           -f alsa -thread_queue_size $athread_queue_size -i ${2:-$audio_device} \
           -qp 0 -preset ultrafast \
           -c:a copy \
           "$1"
}

CBCRadio2() {
    mpv 'http://cbc_r2_tor.akacast.akamaistream.net/7/364/451661/v1/rc.akacast.akamaistream.net/cbc_r2_tor'
}

awless() {
    command aws --color on "$@" | less
}

EC2() {
    awless ec2 describe-instances \
               --query 'Reservations[*].Instances[*].{ID:InstanceId,Type:InstanceType,Name:Tags[?Key==`Name`] | [0].Value,IP:PublicIpAddress}' \
               "$@"
}
